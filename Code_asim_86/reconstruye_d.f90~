!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.4 (r3342) - 27 Jan 2010 15:25
!
!  Differentiation of reconstruye in forward (tangent) mode:
!   variations   of useful results: ux0 uy0 bx1 by1
!   with respect to varying inputs: uy0r by1r ux0r bx1r
!   RW status of diff variables: ux0:out uy0r:in by1r:in uy0:out
!                bx1:out ux0r:in bx1r:in by1:out
!
!  Entrada: ux0r, uy0r, bx1r, by1r, ux0rd, uy0rd, bx1rd, by1rd 
!  Salida: ux0d, uy0d, bx1d, by1d 
!  
!********************************************************************
!
SUBROUTINE RECONSTRUYE_D(ux0r, ux0rd, uy0r, uy0rd, bx1r, bx1rd, by1r, &
&  by1rd, ux0, ux0d, uy0, uy0d, bx1, bx1d, by1, by1d, jyc, jyt, nxr, nyr&
&  , nx, ny, nz, ditime)
!
  implicit none
!
  INTEGER :: jyc, jyt, nxr, nyr, nx, ny, nz, ditime
!
  REAL*8, DIMENSION(nxr, nyr, nz) :: ux0r, uy0r
  REAL*8, DIMENSION(nxr, nyr, nz) :: ux0rd, uy0rd
  REAL*8, DIMENSION(nx, ny, nz) :: ux0, uy0
  REAL*8, DIMENSION(nx, ny, nz) :: ux0d, uy0d
  REAL*8, DIMENSION(nyr, ditime) :: bx1r, by1r
  REAL*8, DIMENSION(nyr, ditime) :: bx1rd, by1rd
  REAL*8, DIMENSION(ny, ditime) :: bx1, by1
  REAL*8, DIMENSION(ny, ditime) :: bx1d, by1d
  REAL*8 :: pi, umc, ramp_base, ramp_exp, ramp
  INTEGER :: j0, jred, deltaj, pre
  INTEGER :: itime, i, j
  REAL*8 :: arg1
  INTEGER :: pwx1
  INTEGER :: pwr1
!
  pi = ACOS(-1.)
  umc = 1.
  deltaj = jyt - jyc
  pre = 9999
!
! zona veloc. constante inferior
  DO j=1,jyc
    DO i=1,nx
      ux0d(i, j, 1) = 0.0_8
      ux0(i, j, 1) = umc
      uy0d(i, j, 1) = 0.0_8
      uy0(i, j, 1) = 0.
    END DO
    DO itime=1,ditime
      bx1d(j, itime) = 0.0_8
      bx1(j, itime) = umc
      by1d(j, itime) = 0.0_8
      by1(j, itime) = 0.
    END DO
  END DO
!
  ux0d = 0.0_8
  uy0d = 0.0_8
  bx1d = 0.0_8
  by1d = 0.0_8
!  
!  zona veloc. de transicion inferior
  DO j=jyc+1,jyt
    j0 = j - jyc
    arg1 = pi*j0/deltaj - pi/2
    ramp_base = 0.5*SIN(arg1) + 0.5
    pwx1 = j0/deltaj
    pwr1 = pwx1**pre
    ramp_exp = 1/(pwr1+1)
    ramp = ramp_base**ramp_exp
    DO i=1,nx
      ux0d(i, j, 1) = ramp*ux0rd(i, 1, 1)
      ux0(i, j, 1) = umc - (umc-ux0r(i, 1, 1))*ramp
      uy0d(i, j, 1) = ramp*uy0rd(i, 1, 1)
      uy0(i, j, 1) = uy0r(i, 1, 1)*ramp
    END DO
    DO itime=1,ditime
      bx1d(j, itime) = ramp*bx1rd(1, itime)
      bx1(j, itime) = umc - (umc-bx1r(1, itime))*ramp
      by1d(j, itime) = ramp*by1rd(1, itime)
      by1(j, itime) = by1r(1, itime)*ramp
    END DO
  END DO
!    
!  zona obs. reducida
  jred = 1
  DO j=jyt+1,jyt+nyr-2
! jred va de 2 a nyr-1
    jred = jred + 1
    DO i=1,nx
      ux0d(i, j, 1) = ux0rd(i, jred, 1)
      ux0(i, j, 1) = ux0r(i, jred, 1)
      uy0d(i, j, 1) = uy0rd(i, jred, 1)
      uy0(i, j, 1) = uy0r(i, jred, 1)
    END DO
    DO itime=1,ditime
      bx1d(j, itime) = bx1rd(jred, itime)
      bx1(j, itime) = bx1r(jred, itime)
      by1d(j, itime) = by1rd(jred, itime)
      by1(j, itime) = by1r(jred, itime)
    END DO
  END DO
!    
!  zona veloc. de transicion superior
  DO j=jyt+nyr-1,2*jyt+nyr-jyc-1
    j0 = j - (jyt+nyr-2)
    arg1 = pi*j0/deltaj - pi/2
    ramp_base = 0.5*SIN(arg1) + 0.5
    pwx1 = j0/deltaj
    pwr1 = pwx1**pre
    ramp_exp = 1/(pwr1+1)
    ramp = ramp_base**ramp_exp
    DO i=1,nx
      ux0d(i, j, 1) = ux0rd(i, nyr, 1) - ramp*ux0rd(i, nyr, 1)
      ux0(i, j, 1) = ux0r(i, nyr, 1) - (ux0r(i, nyr, 1)-umc)*ramp
      uy0d(i, j, 1) = (1-ramp)*uy0rd(i, nyr, 1)
      uy0(i, j, 1) = uy0r(i, nyr, 1)*(1-ramp)
    END DO
    DO itime=1,ditime
      bx1d(j, itime) = bx1rd(nyr, itime) - ramp*bx1rd(nyr, itime)
      bx1(j, itime) = bx1r(nyr, itime) - (bx1r(nyr, itime)-umc)*ramp
      by1d(j, itime) = (1-ramp)*by1rd(nyr, itime)
      by1(j, itime) = by1r(nyr, itime)*(1-ramp)
    END DO
  END DO
!    
!  zona veloc. constante superior
  DO j=2*jyt+nyr-jyc,2*jyt+nyr
    DO i=1,nx
      ux0d(i, j, 1) = 0.0_8
      ux0(i, j, 1) = umc
      uy0d(i, j, 1) = 0.0_8
      uy0(i, j, 1) = 0.
    END DO
    DO itime=1,ditime
      bx1d(j, itime) = 0.0_8
      bx1(j, itime) = umc
      by1d(j, itime) = 0.0_8
      by1(j, itime) = 0.
    END DO
  END DO
! 
  RETURN
END SUBROUTINE RECONSTRUYE_D
